// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/LLVMContext.h>
#include <llvm/Module.h>
#include <llvm/DerivedTypes.h>
#include <llvm/Constants.h>
#include <llvm/GlobalVariable.h>
#include <llvm/Function.h>
#include <llvm/CallingConv.h>
#include <llvm/BasicBlock.h>
#include <llvm/Instructions.h>
#include <llvm/InlineAsm.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <llvm/Pass.h>
#include <llvm/PassManager.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/Assembly/PrintModulePass.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("basic9.s", getGlobalContext());
 mod->setDataLayout("e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128");
 mod->setTargetTriple("x86_64-unknown-linux-gnu");
 
 // Type Definitions
 std::vector<Type*>FuncTy_0_args;
 FunctionType* FuncTy_0 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_0_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_1 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 std::vector<Type*>FuncTy_3_args;
 FuncTy_3_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_3 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_3_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_2 = PointerType::get(FuncTy_3, 0);
 
 
 // Function Declarations
 
 Function* func_main = mod->getFunction("main");
 if (!func_main) {
 func_main = Function::Create(
  /*Type=*/FuncTy_0,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"main", mod); 
 func_main->setCallingConv(CallingConv::C);
 }
 AttrListPtr func_main_PAL;
 {
  SmallVector<AttributeWithIndex, 4> Attrs;
  AttributeWithIndex PAWI;
  PAWI.Index = 4294967295U; PAWI.Attrs = Attribute::None  | Attribute::NoUnwind | Attribute::UWTable;
  Attrs.push_back(PAWI);
  func_main_PAL = AttrListPtr::get(Attrs.begin(), Attrs.end());
  
 }
 func_main->setAttributes(func_main_PAL);
 
 Function* func_exit = mod->getFunction("exit");
 if (!func_exit) {
 func_exit = Function::Create(
  /*Type=*/FuncTy_3,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"exit", mod); // (external, no body)
 func_exit->setCallingConv(CallingConv::C);
 }
 AttrListPtr func_exit_PAL;
 {
  SmallVector<AttributeWithIndex, 4> Attrs;
  AttributeWithIndex PAWI;
  PAWI.Index = 4294967295U; PAWI.Attrs = Attribute::None  | Attribute::NoReturn | Attribute::NoUnwind;
  Attrs.push_back(PAWI);
  func_exit_PAL = AttrListPtr::get(Attrs.begin(), Attrs.end());
  
 }
 func_exit->setAttributes(func_exit_PAL);
 
 // Global Variable Declarations

 
 // Constant Definitions
 ConstantInt* const_int32_4 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
 ConstantInt* const_int32_5 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
 
 // Global Variable Definitions
 
 // Function Definitions
 
 // Function: main (func_main)
 {
  
  BasicBlock* label_entry = BasicBlock::Create(mod->getContext(), "entry",func_main,0);
  BasicBlock* label_return = BasicBlock::Create(mod->getContext(), "return",func_main,0);
  
  // Block entry (label_entry)
  AllocaInst* ptr_retval = new AllocaInst(IntegerType::get(mod->getContext(), 32), "retval", label_entry);
  ptr_retval->setAlignment(4);
  StoreInst* void_6 = new StoreInst(const_int32_5, ptr_retval, false, label_entry);
  CallInst* void_7 = CallInst::Create(func_exit, const_int32_4, "", label_entry);
  void_7->setCallingConv(CallingConv::C);
  void_7->setTailCall(false);
  AttrListPtr void_7_PAL;
  {
   SmallVector<AttributeWithIndex, 4> Attrs;
   AttributeWithIndex PAWI;
   PAWI.Index = 4294967295U; PAWI.Attrs = Attribute::None  | Attribute::NoReturn | Attribute::NoUnwind;
   Attrs.push_back(PAWI);
   void_7_PAL = AttrListPtr::get(Attrs.begin(), Attrs.end());
   
  }
  void_7->setAttributes(void_7_PAL);
  
  new UnreachableInst(mod->getContext(), label_entry);
  
  // Block return (label_return)
  LoadInst* int32_9 = new LoadInst(ptr_retval, "", false, label_return);
  ReturnInst::Create(mod->getContext(), int32_9, label_return);
  
 }
 
 return mod;
}
